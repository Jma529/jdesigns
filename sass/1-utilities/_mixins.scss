// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get($columns, $numberColumns) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

// Media query mixin - takes either a string or paired px-value arguments:
// breakpoint(xs)             Predefined breakpoint (see below)
// breakpoint(768px, 0)       Setting only a min-width breakpoint
// breakpoint(0, 767px)       Setting only a max-width breakpoint
// breakpoint(320px, 480px)   Setting a min-width and max-width breakpoint

@mixin breakpoint($min: 0, $max: 0) {
	$type: type-of($min);
	@if $type == string {
	  @if $min == xs        { @media only screen and (max-width: 576px) { @content; } }
	  @else if $min == sm   { @media only screen and (max-width: 768px) { @content; } }
	  @else if $min == md   { @media only screen and (max-width: 992px) { @content; } }
	  @else if $min == lg   { @media only screen and (max-width: 1200px) { @content; } }
	  @else if $min == xl   { @media only screen and (max-width: 1600px) { @content; } }
	  @else if $min == xxl  { @media only screen and (min-width: 1601px) { @content; } }
  
	  // Media query for screen height <= 815px
	  @else if $min == ht   { @media only screen and (max-height: 815px) { @content; } }
  
	  @else {
		@warn "Check your string - refer to breakpoint.sass";
	  }
	}
	@else if $type == number {
	  $query: "all" !default;
	  @if $min != 0 and $max != 0         { $query: "(min-width: #{$min}) and (max-width: #{$max})" }
	  @else if $min != 0 and $max == 0    { $query: "(min-width: #{$min})" }
	  @else if $min == 0 and $max != 0    { $query: "(max-width: #{$max})" }
	  @media #{$query}                    { @content; }
	}
  }
  
  // Hover/focus/active states mixing - ties into what-input.js to disable hover states on touch devices using the intent parameter
  @mixin on-state($targets...) {
  
	$states: hover, focus, active;
	$selectors: ();
	
	@if $targets != '' {
	  @each $target in $targets {
		@if index($states, $target) {
		  $selectors: append($selectors, "html:not([data-whatintent='touch']) &:#{$target}", comma);
		} @else {
		  @warn "'#{$target}' is not a valid state.";
		}
	  }
	} @else {
	  @warn "No states have been specified.";
	}
  
	#{$selectors} { 
	  @content;
	}
  }
  
  // Inset focus ring for elements that need it
  @mixin inset-focus {
	html:not([data-whatintent='touch']) &:focus {
	  box-shadow: $focus-ring-inset;
	}
  }
  
  // Font size mixin - takes a size argument as number:
  // font-size(10)
  // @mixin font-size($sizeValue: 1) {
	// font-size: $sizeValue + px;
	// font-size: $sizeValue + rem;
  // }

	// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
// $baseline-px: 10px;
// @mixin rem($property, $px-values) {
// // Convert the baseline into rems
// 	$baseline-rem: calc($baseline-px / 1rem);
// // Print the first line in pixel values
// 	#{$property}: $px-values;
// // If there is only one (numeric) value, return the property/value line for it.
// 	@if type-of($px-values) == "number" {
// 		#{$property}: calc($px-values / $baseline-rem); }
// 	@else {
// 	// Create an empty list that we can dump values into
// 		$rem-values: unquote("");
// 		@each $value in $px-values {
// 		// If the value is zero or a string or a color, return unchanged input
// 			@if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
// 				$rem-values: append($rem-values, $value); }
// 			@else {
// 				$rem-values: append($rem-values, $value / $baseline-rem); } }
// 	// Return the property and its list of converted values
// 		#{$property}: $rem-values; } }
  

  // Clearfix mixin - no args required
  // Clears a parent beyond floated child elements
  @mixin clearfix {
	zoom: 1;
  
	&:before,
	&:after {
	  content: '\0020';
	  display: block;
	  overflow: hidden;
	  visibility: hidden;
	  width: 0;
	  height: 0;
	}
  
	&:after {
	  clear: both;
	}
  }
  
  // Visual hide mixin - no args required
  // Hides an element from visual display without affecting its accessibility
  @mixin visual-hide {
	position: absolute;
	overflow: hidden;
	clip: rect(0 0 0 0);
	height: 1px;
	width: 1px;
	margin: -1px;
	padding: 0;
	border: 0;
  }
  
  .visual-hide {
	@include visual-hide;
  }
  
	// Mobile menu mixins

	@mixin alpha-attribute($attribute, $color, $background) {
		$percent: alpha($color) * 100%;
		$opaque: opacify($color, 1);
		$solid-color: mix($opaque, $background, $percent);
		#{$attribute}: $solid-color;
		#{$attribute}: $color;
	}

	@mixin transition {
		@for $i from 1 through 50 {
			&:nth-child(#{$i}) {
				transition: transform 1s #{$i * .08}s cubic-bezier(.29,1.4,.44,.96);
			}
		}
	}